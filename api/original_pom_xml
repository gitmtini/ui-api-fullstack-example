<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>io.diy.api</groupId>
	<artifactId>diyproj-api</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<properties>
		<diy-protos-version>1.0.0-SNAPSHOT</diy-protos-version>
		<ptek-version>2.0.0</ptek-version>
		<hyperledger-sawtooth-version>v0.1.2</hyperledger-sawtooth-version>
		<jetty-server-version>10.0.7</jetty-server-version>
		<jetty-websockets-version>9.2.11.v20150529</jetty-websockets-version>
		<jersey-version>2.35</jersey-version>
		<mongo-driver-version>3.4.1</mongo-driver-version>
		<google-protobuf-version>3.6.1</google-protobuf-version>


		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.source>1.8</maven.compiler.source>


	</properties>

	<dependencies>

		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-server</artifactId>
			<version>${jersey-version}</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet</artifactId>
			<version>${jersey-version}</version>
		</dependency>

		<!-- if you are using Jersey client specific features without the server 
			side -->
		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-client</artifactId>
			<version>${jersey-version}</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-jetty-http</artifactId>
			<version>${jersey-version}</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jersey.inject</groupId>
			<artifactId>jersey-hk2</artifactId>
			<version>${jersey-version}</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-grizzly2-http</artifactId>
			<version>2.9.1</version>
		</dependency>


		<!--  
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-server</artifactId>
			<version>${jetty-server-version}</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-servlet</artifactId>
			<version>${jetty-server-version}</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.jetty.websocket</groupId>
			<artifactId>javax-websocket-server-impl</artifactId>
			<version>${jetty-websockets-version}</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.jetty.websocket</groupId>
			<artifactId>javax-websocket-client-impl</artifactId>
			<version>${jetty-websockets-version}</version>
		</dependency>
		
		-->

		<!-- https://mvnrepository.com/artifact/javax.ws.rs/javax.ws.rs-api 
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
			<version>2.1.1</version>
		</dependency>
		
		-->

		<!-- Jersey DI and core <dependency> <groupId>org.glassfish.jersey.inject</groupId> 
			<artifactId>jersey-hk2</artifactId> <version>${jersey-version}</version> 
			</dependency> -->


		<!-- Jetty 11 needs Servlet 5 - <dependency> <groupId>jakarta.servlet</groupId> 
			<artifactId>jakarta.servlet-api</artifactId> <version>5.0.0</version> </dependency> -->


		<dependency>
			<groupId>com.prelimtek.io</groupId>
			<artifactId>ptek-io-clients_mtini</artifactId>
			<version>${ptek-version}</version>
		</dependency>

		<dependency>
			<groupId>com.prelimtek.utils</groupId>
			<artifactId>ptek-crypto-utils</artifactId>
			<version>${ptek-version}</version>
		</dependency>

		<dependency>
			<groupId>io.diy.protos</groupId>
			<artifactId>diyproj-protos</artifactId>
			<version>${diy-protos-version}</version>
		</dependency>

		<dependency>
			<groupId>org.hyperledger.sawtooth</groupId>
			<artifactId>sawtooth-sdk-transaction-processor</artifactId>
			<version>${hyperledger-sawtooth-version}</version>
		</dependency>

		<dependency>
			<groupId>org.hyperledger.sawtooth</groupId>
			<artifactId>sawtooth-sdk-protos</artifactId>
			<version>${hyperledger-sawtooth-version}</version>
		</dependency>

		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm-all</artifactId>
			<version>3.3.1</version>
		</dependency>

		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java-util</artifactId>
			<version>${google-protobuf-version}</version>
		</dependency>

		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20090211</version>
		</dependency>

		<!-- <dependency> <groupId>com.sun.jersey</groupId> <artifactId>jersey-bundle</artifactId> 
			<version>1.14</version> </dependency> -->


		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>19.0</version>
		</dependency>

		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>

		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.7.0</version>
		</dependency>

		<dependency>
			<groupId>org.java-websocket</groupId>
			<artifactId>Java-WebSocket</artifactId>
			<version>1.3.0</version>
		</dependency>



		<dependency>
			<groupId>net.spy</groupId>
			<artifactId>spymemcached</artifactId>
			<version>2.12.3</version>
		</dependency>


		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongo-java-driver</artifactId>
			<version>${mongo-driver-version}</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.paho</groupId>
			<artifactId>org.eclipse.paho.client.mqttv3</artifactId>
			<version>1.2.5</version>
		</dependency>

	</dependencies>

	<build>
		<finalName>mtini-rest</finalName>
		<sourceDirectory>src</sourceDirectory>
		<resources>
			<resource>
				<directory>resources</directory>
			</resource>
		</resources>
		<plugins>

			<!-- download source code in Eclipse, best practice -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>false</downloadJavadocs>
				</configuration>
			</plugin>

			<!-- Maven Shade Plugin - makes fat jar -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<!-- <configuration> <release>11</release> </configuration> -->
			</plugin>

			<!-- Make this jar executable -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>**/log4j.properties</exclude>
					</excludes>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<mainClass>io.mtini.rest.JettyServerRun</mainClass>
							<classpathPrefix>dependency-jars/</classpathPrefix>
						</manifest>
					</archive>
				</configuration>
			</plugin>

			<!-- Copy project dependency -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.5.1</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<!-- exclude junit, we need runtime dependency only -->
							<includeScope>runtime</includeScope>
							<outputDirectory>${project.build.directory}/dependency-jars/</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.5.1</version>
				<configuration>
					<appendAssemblyId>true</appendAssemblyId>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<mainClass>io.diy.api.JettyServerRun</mainClass>
							<classpathPrefix>dependency-jars/</classpathPrefix>
						</manifest>
					</archive>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>assembly</goal>
						</goals>
					</execution>
				</executions>

			</plugin>



			<plugin>
				<groupId>com.sun.jersey.contribs</groupId>
				<artifactId>maven-wadl-plugin</artifactId>
				<version>1.19.4</version>

				<dependencies>
					<dependency>
						<groupId>xerces</groupId>
						<artifactId>xercesImpl</artifactId>
						<version>2.11.0</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<id>generate</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<phase>${javadoc-phase}</phase>
					</execution>
				</executions>
				<configuration>
					<wadlFile>${project.build.outputDirectory}/application.wadl
					</wadlFile>
					<formatWadlFile>true</formatWadlFile>
					<baseUri>http://example.com:8080/rest</baseUri>
					<packagesResourceConfig>
						<param>io.diy.api.rs.resource</param>
					</packagesResourceConfig>
					<wadlGenerators>
						<wadlGeneratorDescription>
							<className>com.sun.jersey.server.wadl.generators.WadlGeneratorApplicationDoc
							</className>
							<properties>
								<property>
									<name>applicationDocsFile</name>
									<value>${basedir}/doc/application-doc.xml</value>
								</property>
							</properties>
						</wadlGeneratorDescription>
						<wadlGeneratorDescription>
							<className>com.sun.jersey.server.wadl.generators.WadlGeneratorGrammarsSupport
							</className>
							<properties>
								<property>
									<name>grammarsFile</name>
									<value>${basedir}/doc/application-grammars.xml</value>
								</property>
							</properties>
						</wadlGeneratorDescription>

					</wadlGenerators>
				</configuration>
			</plugin>





		</plugins>

	</build>
</project>
