<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>io.diy.api</groupId>
	<artifactId>diy-api</artifactId>
	<packaging>jar</packaging>
	<version>1.0.0-SNAPSHOT</version>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>11</maven.compiler.source>
		<maven.compiler.target>11</maven.compiler.target>
		<java.version>11</java.version>
		<junit.version>5.4.0</junit.version>
		<jsonassert.version>1.5.0</jsonassert.version>
		<jersey.version>3.0.2</jersey.version>


		<diy-protos-version>1.0.0-SNAPSHOT</diy-protos-version>
		<ptek-version>2.0.0</ptek-version>
		<hyperledger-sawtooth-version>v0.1.2</hyperledger-sawtooth-version>
		<mongo-driver-version>3.4.1</mongo-driver-version>
		<google-protobuf-version>3.6.1</google-protobuf-version>


	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.glassfish.jersey</groupId>
				<artifactId>jersey-bom</artifactId>
				<version>${jersey.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		 <!-- Jetty -->
        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-jetty-http</artifactId>
        </dependency>

        <!-- Jersey DI and core-->
        <dependency>
            <groupId>org.glassfish.jersey.inject</groupId>
            <artifactId>jersey-hk2</artifactId>
        </dependency>

        <!-- Jetty 11 needs Servlet API 5 -->
        <!-- java.lang.NoClassDefFoundError: jakarta/servlet/ServletInputStream -->
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>5.0.0</version>
        </dependency>

        <!-- add jackson to support json -->
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
        </dependency>

        <!-- Need this to hide warning for jakarta.activation.DataSource -->
        <dependency>
            <groupId>jakarta.activation</groupId>
            <artifactId>jakarta.activation-api</artifactId>
            <version>2.0.1</version>
        </dependency>

        <!-- JUnit 5 -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- test json data -->
        <dependency>
            <groupId>org.skyscreamer</groupId>
            <artifactId>jsonassert</artifactId>
            <version>${jsonassert.version}</version>
            <scope>test</scope>
        </dependency>

		<!-- Need this to hide warning <dependency> <groupId>jakarta.activation</groupId> 
			<artifactId>jakarta.activation-api</artifactId> <version>2.0.1</version> 
			</dependency> -->


		<dependency>
			<groupId>com.prelimtek.io</groupId>
			<artifactId>ptek-io-clients_mtini</artifactId>
			<version>${ptek-version}</version>
		</dependency>

		<dependency>
			<groupId>com.prelimtek.utils</groupId>
			<artifactId>ptek-crypto-utils</artifactId>
			<version>${ptek-version}</version>
		</dependency>

		<dependency>
			<groupId>io.diy.protos</groupId>
			<artifactId>diyproj-protos</artifactId>
			<version>${diy-protos-version}</version>
		</dependency>

		<dependency>
			<groupId>org.hyperledger.sawtooth</groupId>
			<artifactId>sawtooth-sdk-transaction-processor</artifactId>
			<version>${hyperledger-sawtooth-version}</version>
		</dependency>

		<dependency>
			<groupId>org.hyperledger.sawtooth</groupId>
			<artifactId>sawtooth-sdk-protos</artifactId>
			<version>${hyperledger-sawtooth-version}</version>
		</dependency>

		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>19.0</version>
		</dependency>

		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>

		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.7.0</version>
		</dependency>


		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongo-java-driver</artifactId>
			<version>${mongo-driver-version}</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.paho</groupId>
			<artifactId>org.eclipse.paho.client.mqttv3</artifactId>
			<version>1.2.5</version>
		</dependency>
		
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java-util</artifactId>
			<version>${google-protobuf-version}</version>
		</dependency>

	</dependencies>

	<build>
		<finalName>jersey-jetty</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>

			<!-- JUnit 5 need at least 2.22.0 to support -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M5</version>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
							<mainClass>io.diy.api.JettyServerRun</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>

			<!-- copy project dependencies -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.1.2</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<!-- exclude junit, we need runtime dependency only -->
							<includeScope>runtime</includeScope>
							<outputDirectory>${project.build.directory}/lib/</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>
</project>