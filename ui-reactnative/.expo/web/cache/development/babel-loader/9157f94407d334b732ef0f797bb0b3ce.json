{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect, useState } from \"react\";\nimport { CustomerDetails } from \"./proto/bin/CustomerDetailsAndWallet_pb\";\nimport * as protobuf from \"protobufjs\";\nimport base64 from 'react-native-base64';\nvar api_url = 'http://localhost:8888/awesome/api/v1';\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nvar atob = function atob() {\n  var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var str = input.replace(/=+$/, '');\n  var output = '';\n\n  if (str.length % 4 == 1) {\n    throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n\n  for (var bc = 0, bs = 0, buffer, i = 0; buffer = str.charAt(i++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n    buffer = chars.indexOf(buffer);\n  }\n\n  return output;\n};\n\nFileReader.prototype.readAsArrayBuffer = function (blob) {\n  return new Promise(function (resolve, reject) {\n    var retVal = null;\n    var fr = new FileReader();\n\n    fr.onloadend = function () {\n      var content = atob(fr.result.substr(\"data:application/json;base64,\".length));\n      var buffer = new ArrayBuffer(content.length);\n      var view = new Uint8Array(buffer);\n      view.set(Array.from(content).map(function (c) {\n        return c.charCodeAt(0);\n      }));\n      retVal = view;\n    };\n\n    fr.readAsDataURL(blob);\n    setTimeout(function () {\n      resolve(retVal);\n    }, 1000);\n  });\n};\n\nvar getCustomerDetails = function getCustomerDetails() {\n  var protobuf, requestOptions, response, blob, fr, res, customer;\n  return _regeneratorRuntime.async(function getCustomerDetails$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log(\"apicaller getCustomerDetails\");\n          protobuf = require(\"protobufjs/minimal\");\n          _context.prev = 2;\n          requestOptions = {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/octet-stream'\n            }\n          };\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(fetch(api_url + \"/example/customer/123\", requestOptions));\n\n        case 6:\n          response = _context.sent;\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(response.blob());\n\n        case 9:\n          blob = _context.sent;\n          fr = new FileReader();\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(fr.readAsArrayBuffer(blob));\n\n        case 13:\n          res = _context.sent;\n          customer = CustomerDetails.deserializeBinary(res).toObject();\n          console.log(\"apicaller getCustomerDetails customer = \" + customer);\n          _context.next = 18;\n          return _regeneratorRuntime.awrap(customer);\n\n        case 18:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 21:\n          _context.prev = 21;\n          _context.t0 = _context[\"catch\"](2);\n          console.error(_context.t0);\n\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 21]], Promise);\n};\n\nexport { getCustomerDetails };","map":{"version":3,"sources":["/Users/kaniu/Documents/workspace_opensourcecitizens/mobile-api-fullstack-example/ui-reactnative/apicaller.js"],"names":["useEffect","useState","CustomerDetails","protobuf","base64","api_url","chars","atob","input","str","replace","output","length","Error","bc","bs","buffer","i","charAt","String","fromCharCode","indexOf","FileReader","prototype","readAsArrayBuffer","blob","Promise","resolve","reject","retVal","fr","onloadend","content","result","substr","ArrayBuffer","view","Uint8Array","set","Array","from","map","c","charCodeAt","readAsDataURL","setTimeout","getCustomerDetails","console","log","require","requestOptions","method","headers","fetch","response","res","customer","deserializeBinary","toObject","error"],"mappings":"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","sourcesContent":["\nimport { useEffect, useState } from \"react\";\nimport { CustomerDetails } from \"./proto/bin/CustomerDetailsAndWallet_pb\";\nimport * as protobuf from \"protobufjs\";\nimport base64 from 'react-native-base64'\n\nconst api_url = 'http://localhost:8888/awesome/api/v1';\n\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst atob = (input = '') => {\n\tlet str = input.replace(/=+$/, '');\n\tlet output = '';\n\n\tif (str.length % 4 == 1) {\n\t\tthrow new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n\t}\n\tfor (let bc = 0, bs = 0, buffer, i = 0;\n\t\tbuffer = str.charAt(i++);\n\n\t\t~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n\t\t\tbc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n\t) {\n\t\tbuffer = chars.indexOf(buffer);\n\t}\n\n\treturn output;\n}\n\nFileReader.prototype.readAsArrayBuffer = function (blob) {\n    return new Promise(function(resolve, reject) {\n\tlet retVal = null;\n\tconst fr = new FileReader();\n\tfr.onloadend = () => {\n\t\tconst content = atob(fr.result.substr(\"data:application/json;base64,\".length));\n\t\t//console.log(`content = ${content}`)\n\t\tconst buffer = new ArrayBuffer(content.length);\n\t\tconst view = new Uint8Array(buffer);\n\t\tview.set(Array.from(content).map(c => c.charCodeAt(0)));\n\t\t//console.log(`view = ${view}`)\n\t\t//console.log(this);\n        retVal = view;\n        //console.log(`retVal=${retVal}`);\n\t};\n\tfr.readAsDataURL(blob);\n        setTimeout(() => {\n          resolve(retVal);\n       }, 1000);\n\n    })//promise\n\n}\n\nconst getCustomerDetails = async ()=>{\n    console.log(\"apicaller getCustomerDetails\");\n    var protobuf = require(\"protobufjs/minimal\");\n    //var fr = require(FileReader);\n    try{\n\n        const requestOptions = {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/octet-stream'}\n            //, body: JSON.stringify({ title: 'React POST Request Example' })\n        };\n\n        //console.log(`apicaller getCustomerDetails url  ${api_url}`);\n        const response = await fetch(`${api_url}/example/customer/123`, requestOptions);\n        //console.log(`apicaller getCustomerDetails response = ${response}`);\n        const blob = await response.blob();\n        //console.log(blob);\n\n        const fr = new FileReader();\n        let res = await fr.readAsArrayBuffer(blob);\n        //var res = await FileReader.prototype.readAsArrayBuffer(blob);\n        //console.log(`res = ${res}`);\n        const customer = CustomerDetails.deserializeBinary(res).toObject();\n        console.log(`apicaller getCustomerDetails customer = ${customer}`);\n\n        return await customer;\n    }catch(error){\n        console.error(error);\n    }\n}\n\nexport { getCustomerDetails  };"]},"metadata":{},"sourceType":"module"}